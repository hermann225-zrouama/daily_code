"""
Good morning! Here's your coding interview problem for today.

This problem was asked by Google.

Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.

For example, given the following Node class

class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
The following test should pass:

node = Node('root', Node('left', Node('left.left')), Node('right'))
assert deserialize(serialize(node)).left.left.val == 'left.left'

"""


class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def deserialize(root, nodes):
    nodes.append(root.val)"""
Good morning! Here's your coding interview problem for today.

This problem was asked by Google.

Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.

For example, given the following Node class

class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
The following test should pass:

node = Node('root', Node('left', Node('left.left')), Node('right'))
assert deserialize(serialize(node)).left.left.val == 'left.left'

"""


class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def deserialize(root, nodes):
    nodes.append(root.val)

    if root and root.left:
        deserialize(root.left, nodes)

    if root and root.right:
        deserialize(root.right, nodes)
    return nodes


if __name__ == "__main__":
    node = Node('root', Node('left', Node('left.left')), Node('right'))
    print(deserialize(node.left.left, []))


    if root and root.left:
        deserialize(root.left, nodes)

    if root and root.right:
        deserialize(root.right, nodes)
    return nodes


if __name__ == "__main__":
    node = Node('root', Node('left', Node('left.left')), Node('right'))
    print(deserialize(node.left.left, []))
